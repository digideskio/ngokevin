title: "USENIX NDSI'12 Day 1"
type: blog
category: blog
author: Kevin Ngo <ngoke@onid.oregonstate.edu>

slug: "nsdi-day1"

date: 2012-04-25

---
<style>
    p.metadata {
        margin-top: -1em;
    }
</style>

Previously, I received a [grant](/blog/usenixgrant/) to attend this year's
USENIX Networked Systems Design and Implementation Symposium. After a lengthy
drive from Portland that involved temporarily losing my wallet and
experiencing culture shock from Californian drivers, I arrived Mountain
View. Toured some streets and the Mozilla office for a bit, slept, and took
off to NSDI in San Jose.

From a pool of about 170 submitted research papers, 30 were chosen by a board
to be presented to other researchers and industry representatives. They were
then grouped into a handful of topics. Topics for the first day were big data,
wireless, content and service-oriented networking, and network robustness.

## Big Data

Unfortunately, I lost my notes for the topics on big data and wireless. Big
data topics went over my head anyways.

### CORFU: A Shared Log Design for Flash Clusters
<p class="metadata" id="metadata">
    Mahesh Balakrishnan, Dahlia Malkhi, Vijayan Prabhakaran, and Ted Wobber,
    Microsoft Research Silicon Valley; Michael Wei, University of California, San
    Diego; John D. Davis, Microsoft Research Silicon Valley
</p>

CORFU is as it sounds, flash clusters implemented via a single log. The
motiviation was to maximize the use of a single flash drive with a shared log.
The advantages to this are quick random-access reads with fast tail-end
writes while not degrading the flash drive.

### Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing
<p class="metadata" id="metadata">
    Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma,
    Murphy McCauley, Michael J. Franklin, Scott Shenker, Ion Stoica
    University of California, Berkeley
</p>

Resilient distributed datasets (RDDs) allow users (programmers) to explicitly
persist intermediate results of queries in memory, control their partitioning
to optimize data placement, and manipulate them with a set of operators.
Performance is significantly improved by keeping results in memory. There are
several other frameworks that implement a similar ability but are geared
towards things like MapReduce. RDDs are abstracted for general use.

### Camdoop: Exploiting In-network Aggregation for Big Data Applications
<p class="metadata" id="metadata">
    Paolo Costa, Microsoft Research Cambridge and Imperial College London;
    Austin Donnelly, Antony Rowstron, and Greg O'Shea, Microsoft Research
    Cambridge
</p>

Camdoop is a MapReduce-like system that optimizes performance by doing packet
processing or in-network aggregation during the shuffle phase of map/reduce.
The shuffle phase is when the intermediate data is being transferred between
the servers. Rather than redesign a data center's network topology, Camdoop
can be used to mitigate performance issues by decreasing network bandwidth
use.

## Wireless

### WiFi-NC: WiFi Over Narrow Channels
<p class="metadata" id="metadata">
    Krishna Chintalapudi, Microsoft Research India; Bozidar Radunovic,
    Microsoft Research UK; Vlad Balan, USC; Michael Buettener, University of
    Washington; Srinivas Yerramalli, USC; Vishnu Navda and Ramachandran Ramjee,
    Microsoft Research India
</p>

Rather than use wider channels to increase wireless data rates, WiFi-NC
advocates for using many narrow channels in parallel. A WiFi-NC radio can make
full use of its radio channel even after reducing its channel width in the
presence of other devices as per 802.11n standards. Also with variable width
channels, a fragmented spectrum can be filled in and be rid of wasted
whitespace.

### Catching Whales and Minnows Using WiFiNet: Deconstructing Non-WiFi Interference Using WiFi Hardware
<p class="metadata" id="metadata">
    Shravan Rayanchu, Ashish Patro, and Suman Banerjee, University of
    Wisconsin Madison
</p>

Tired of losing connection? It might be because of devices such as microwaves
and handheld phones causing WiFi interference. Though how much of an effect
the interference has, if any at all, is a question. Whales are non-WiFi
devices that drastically affect other WiFi devices whereas minnows not so
much. To locate whales and minnows on the network, access points can
collaborate with each other to quanitfy and physically locate interference. To
differentiate between types of devices, WiFiNet uses tight clock
synchronization and other factors amongst several WiFi detectors. Signal
strenght triangulation and RF fingerprinting is used to locate where the
device is in the room. It is sort of like **whodunit?**, deducing the (signal)
killer in the room.

**update:** I got tired of trying of summarizing every single paper. Couple of other
cool talks for this day included redundant packet transmission, signed logging
for client accountability in P2P-infrastructure hybrid networks, and static
header-space analysis for finding loops in the network.
